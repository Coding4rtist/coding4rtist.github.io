{"version":3,"file":"component---src-pages-index-js-bb506be2f4318e0f035e.js","mappings":"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","sources":["webpack://new-website/./node_modules/camelcase/index.js","webpack://new-website/../src/image-utils.ts","webpack://new-website/../src/components/hooks.ts","webpack://new-website/../src/components/layout-wrapper.tsx","webpack://new-website/../src/components/picture.tsx","webpack://new-website/../src/components/placeholder.tsx","webpack://new-website/../src/components/main-image.tsx","webpack://new-website/../src/components/gatsby-image.server.tsx","webpack://new-website/../src/components/gatsby-image.browser.tsx","webpack://new-website/../src/components/static-image.server.tsx","webpack://new-website/../src/components/static-image.tsx","webpack://new-website/./src/styles/homeStyles.js","webpack://new-website/./src/components/icons/down-arrow.js","webpack://new-website/./src/components/homePage/HomeBanner.js","webpack://new-website/./src/components/homePage/HomeFeatured.js","webpack://new-website/./src/pages/index.js"],"sourcesContent":["'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import styled, { css } from 'styled-components'\nimport { motion } from 'framer-motion'\n\n// Banner\nexport const Banner = styled.div`\n\tbackground: ${props => props.theme.background};\n\theight: 100vh;\n\twidth: 100%;\n\tposition: relative;\n\t/* margin-bottom: 16px; */\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-items: center;\n`\n\nexport const BannerImage = styled.div`\n\theight: 100%;\n\twidth: 100%;\n\tposition: absolute;\n\n\timg {\n\t\tobject-fit: cover;\n\t}\n`\n\nexport const BannerContainer = styled.div`\n\theight: 100%;\n\tmax-width: 1220px;\n\tmargin: auto;\n\tpadding: 0 1.66667rem 0 1.66667rem;\n\tdisplay: flex;\n\talign-items: flex-end;\n\n\t.title-container {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\tword-wrap: break-word;\n\t\tposition: relative;\n\t\t/* width: calc(100% / 12 ) */\n\n\t\tpadding-bottom: 10rem;\n\t}\n`\n\nexport const BannerHeadline = styled(motion.div)`\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex: 1 1 0%;\n\ttext-align: center;\n\tjustify-content: center;\n\tposition: relative;\n\n\th1 {\n\t\tfont-size: 5rem;\n\t\tcolor: #fff;\n\t\tpointer-events: none;\n\t\tmargin: 0;\n\t}\n\n\th2 {\n\t\tfont-size: 2rem;\n\t\tletter-spacing: 0.15rem;\n\t\tcolor: #eaeaea;\n\t}\n\n\t@media (max-width: 768px) {\n\t\th1 {\n\t\t\tfont-size: 2rem;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\th2 {\n\t\t\tfont-size: 1rem;\n\t\t}\n\t}\n`\n\nexport const BannerTitle = styled(motion.h1)`\n\t/* position: absolute; */\n\t/* bottom: 150px; */\n\t/* left: 18px; */\n\t/* left: 23%; */\n\tpointer-events: none;\n\tpadding-bottom: 9rem;\n\n\tspan {\n\t\tcolor: #fff;\n\t}\n`\n\nexport const Headline = styled(motion.span)`\n\tdisplay: block;\n\tfont-size: 4rem;\n\tfont-weight: bold;\n\tline-height: 1.36;\n\tletter-spacing: 0.2rem;\n\n\t&.subtitle {\n\t\tfont-size: 2rem;\n\t\tletter-spacing: 0.15rem;\n\t\tcolor: #eaeaea;\n\t}\n\n\t@media (max-width: 768px) {\n\t\tfont-size: 2rem;\n\t\t/* width: 400px; */\n\t\twidth: 100%;\n\n\t\t&.subtitle {\n\t\t\tfont-size: 1rem;\n\t\t\tletter-spacing: 0.15rem;\n\t\t\tcolor: #eaeaea;\n\t\t}\n\t}\n`\n\nexport const DownArrowContainer = styled(motion.button)`\n\t/* position: absolute; */\n\t/* bottom: 20px;\n\tleft: 50%; */\n\t/* margin-left: -26px; */\n\t/* min-width: 100%;\n\tpadding-bottom: 20px;\n\tjustify-content: center; */\n\tbackground: transparent;\n\tborder: none;\n\tflex-grow: 0;\n\tz-index: 1;\n\tmargin-bottom: 20px;\n\n\t&:focus {\n\t\toutline: 0;\n\t}\n`\n\n// Featured\n\nexport const FeaturedProjects = styled.ul`\n\tdisplay: flex;\n\tflex-direction: column;\n\tmargin: 0;\n\tpadding: 0;\n`\n\nexport const LeftProjectWrap = styled.li`\n\t/* display: grid;\n\tgrid-template-rows: 0.3fr 1fr auto 1fr;\n\tgrid-column: 4/12;\n\twidth: 60%;\n\tmargin: auto; */\n\t/* display: flex;\n\tflex-direction: ${props => (props.invert ? 'row-reverse' : 'row')};\n\tjustify-content: flex-start;\n\twidth: 60%;\n\tmargin: auto;\n\tpadding: 55px 0; */\n\n\talign-items: stretch;\n\tdisplay: flex;\n\tflex-direction: ${props => (props.invert ? 'row-reverse' : 'row')};\n\tpadding: 5rem 0;\n\n\t@media (max-width: 768px) {\n\t\tflex-direction: column;\n\t}\n`\n\nexport const LeftProjectInfo = styled.div`\n\t/* display: grid;\n\tgrid-template-rows: 0.3fr 1fr auto 1fr;\n\tgrid-column: 4/12;\n\twidth: 60%;\n\tmargin: auto; */\n\t/* display: flex;\n\tflex-direction: column;\n\tjustify-content: center; */\n\n\talign-items: ${props => (props.invert ? 'flex-end' : 'flex-start')};\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex-grow: 1;\n\tflex-shrink: 1;\n\tjustify-content: center;\n\t/* margin-left: 5rem; */\n\n\th1 {\n\t\tfont-size: 44px;\n\t\tmargin: 0.3em 150px 0.3em 0;\n\t\t@media (max-width: 1216px) {\n\t\t\tfont-size: 28px;\n\t\t}\n\t}\n\n\th3 {\n\t\tfont-size: 20px;\n\t\tfont-weight: 300;\n\t\topacity: 0.6;\n\t\tmargin: 0;\n\t\t@media (max-width: 1216px) {\n\t\t\tfont-size: 16px;\n\t\t}\n\t}\n\n\th2 {\n\t\tfont-size: 30px;\n\t\tfont-weight: 300;\n\t\tmargin: 0.3em 0;\n\t\t@media (max-width: 1216px) {\n\t\t\tfont-size: 20px;\n\t\t}\n\t}\n\n\t${props =>\n\t\tprops.invert\n\t\t\t? css`\n\t\t\t\t\ttext-align: right;\n\t\t\t\t\t/* margin-left: 3rem; */\n\t\t\t\t\tmargin-right: 5rem;\n\t\t\t\t\t@media (max-width: 1216px) {\n\t\t\t\t\t\tmargin-right: 3rem;\n\t\t\t\t\t}\n\t\t\t\t\t@media (max-width: 768px) {\n\t\t\t\t\t\tmargin: 2.5rem 0 0;\n\t\t\t\t\t}\n\n\t\t\t\t\th1 {\n\t\t\t\t\t\tmargin: 0.3em 0 0.3em 150px;\n\t\t\t\t\t}\n\t\t\t  `\n\t\t\t: css`\n\t\t\t\t\tmargin-left: 5rem;\n\t\t\t\t\t/* margin-right: 3rem; */\n\t\t\t\t\t@media (max-width: 1216px) {\n\t\t\t\t\t\tmargin-left: 3rem;\n\t\t\t\t\t}\n\t\t\t\t\t@media (max-width: 768px) {\n\t\t\t\t\t\tmargin: 2.5rem 0 0;\n\t\t\t\t\t}\n\n\t\t\t\t\th1 {\n\t\t\t\t\t\tmargin: 0.3em 150px 0.3em 0;\n\t\t\t\t\t}\n\t\t\t  `}\n`\n\nexport const LeftProjectHeadline = styled.div`\n\t/* grid-column: 6/10;\n\tgrid-row: 1/3;\n\talign-self: end;\n\tmargin-top: 0; */\n`\n\nexport const LeftLineContainer = styled.div`\n\t/* grid-column: 6/10;\n\tgrid-row: 3/4;\n\theight: 60px; */\n\theight: 30px;\n\tdisplay: flex;\n\tflex-direction: ${props => (props.invert ? 'row-reverse' : 'row')};\n\talign-items: center;\n\n\t/* display: flex;\n    flex-direction: row;\n    position: relative; */\n\t/* flex-grow: 1; */\n\twidth: 100%;\n\n\tdiv {\n\t\twidth: 100%;\n\t\theight: 3px;\n\t\t/* width: 0%; */\n\t\t/* margin-right: 50px; */\n\t\tborder-radius: 50px;\n\t\tbackground-color: ${props => props.theme.text};\n\t\torder: -1;\n\t\ttransition: 1s ease-in-out;\n\n\t\t${props =>\n\t\t\tprops.invert\n\t\t\t\t? css`\n\t\t\t\t\t\tmargin-left: 50px;\n\t\t\t\t  `\n\t\t\t\t: css`\n\t\t\t\t\t\tmargin-right: 50px;\n\t\t\t\t  `}\n\t}\n\n\th4 {\n\t\tfont-size: 1.2em;\n\t}\n`\n\nexport const LeftProjectImage = styled.div`\n\t/* grid-row: 2/5;\n\tgrid-column: 1/5;\n\talign-items: center; */\n\t/* margin-right: 85px; */\n\n\tflex-basis: 60%; // Era 70\n\tflex-grow: 1;\n\tflex-shrink: 1;\n\tmin-width: 0;\n\tposition: relative;\n\n\t/* ${props =>\n\t\tprops.invert\n\t\t\t? css`\n\t\t\t\t\tmargin-left: 85px;\n\t\t\t  `\n\t\t\t: css`\n\t\t\t\t\tmargin-right: 85px;\n\t\t\t  `} */\n`\n\nexport const LeftProjectText = styled.div`\n\t/* grid-column: 6/9;\n\tdisplay: inline;\n\tgrid-row: 4/5; */\n\ttext-align: justify;\n`\n","import React from 'react'\n\nconst DownArrow = () => (\n\t<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"53\" height=\"20\">\n\t\t<path\n\t\t\tfill=\"#fff\"\n\t\t\td=\"M26.5 17.688L9.114 3.779l1.189-1.467L26.5 15.269 42.697 2.313l1.189 1.466z\"\n\t\t/>\n\t</svg>\n)\n\nexport default DownArrow\n","import React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport scrollTo from 'gatsby-plugin-smoothscroll'\nimport { motion } from 'framer-motion'\n\nimport {\n\tBanner,\n\tBannerImage,\n\tBannerContainer,\n\tBannerHeadline,\n\tBannerTitle,\n\tHeadline,\n\tDownArrowContainer,\n} from '@styles/homeStyles'\nimport { Container, Flex } from '@styles/globalStyles'\n\nimport DownArrow from '@components/icons/down-arrow'\n\nconst parentVariant = {\n\t// initial: { y: 300 },\n\tanimate: {\n\t\t// y: 0,\n\t\ttransition: {\n\t\t\tstaggerChildren: 0.2,\n\t\t},\n\t},\n}\n\nconst childVariant = {\n\tinitial: { y: 300 },\n\tanimate: {\n\t\ty: 0,\n\t\ttransition: {\n\t\t\tduration: 1,\n\t\t\tease: [0.6, 0.05, -0.01, 0.9],\n\t\t},\n\t},\n}\n\nconst HomeBanner = ({ onCursor }) => {\n\tconst query = graphql`\n\t\tquery {\n\t\t\tsite {\n\t\t\t\tsiteMetadata {\n\t\t\t\t\ttitle\n\t\t\t\t\tbannerTitle\n\t\t\t\t\tbannerSubtitle\n\t\t\t\t}\n\t\t\t}\n\t\t\tbanner: file(relativePath: { eq: \"39_Out_of_the_Blue_Wallpaper.jpg\" }) {\n\t\t\t\tchildImageSharp {\n\t\t\t\t\tgatsbyImageData(\n\t\t\t\t\t\tlayout: CONSTRAINED\n\t\t\t\t\t\tplaceholder: TRACED_SVG\n\t\t\t\t\t\tformats: [AUTO, WEBP]\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`\n\n\tconst result = useStaticQuery(query)\n\tconst siteData = result.site.siteMetadata\n\tconst headerImage = getImage(result.banner)\n\t// console.log(siteData, headerImage)\n\t// return (<></>)\n\n\tconst executeScroll = () => {\n\t\tscrollTo('#first-content')\n\t}\n\n\treturn (\n\t\t<Banner>\n\t\t\t<BannerImage>\n\t\t\t\t<GatsbyImage\n\t\t\t\t\timage={headerImage}\n\t\t\t\t\talt=\"\"\n\t\t\t\t\tlayout=\"fullWidth\"\n\t\t\t\t\tobjectFit=\"cover\"\n\t\t\t\t\tobjectPosition=\"50% 50%\"\n\t\t\t\t\tstyle={{ width: '100%', height: '100%' }}\n\t\t\t\t\tdraggable={false}\n\t\t\t\t/>\n\t\t\t</BannerImage>\n\n\t\t\t{/* <Container flexEnd> */}\n\t\t\t<BannerHeadline\n\t\t\t\t// direction=\"column\"\n\t\t\t\t// alignStart\n\t\t\t\t// style={{ width: '100%' }}\n\t\t\t\tvariants={parentVariant}\n\t\t\t\tinitial=\"initial\"\n\t\t\t\tanimate=\"animate\"\n\t\t\t>\n\t\t\t\t<motion.h1 variants={childVariant}>CodingArtist</motion.h1>\n\t\t\t\t<motion.h2 variants={childVariant}>3D Artist | Developer</motion.h2>\n\t\t\t\t{/* <Headline ></Headline>\n\t\t\t\t\t\t<Headline variants={childVariant} className=\"subtitle\">\n\t\t\t\t\t\t\t3D Artist | Developer\n\t\t\t\t\t\t</Headline> */}\n\t\t\t</BannerHeadline>\n\t\t\t{/* </Container> */}\n\t\t\t<DownArrowContainer\n\t\t\t\tonClick={executeScroll}\n\t\t\t\tonMouseEnter={() => onCursor('hovered')}\n\t\t\t\tonMouseLeave={onCursor}\n\t\t\t>\n\t\t\t\t<DownArrow />\n\t\t\t</DownArrowContainer>\n\n\t\t\t{/* <BannerContainer>\n\t\t\t\t<div className=\"title-container\">\n\t\t\t\t\t<BannerTitle\n\t\t\t\t\t\tvariants={parentVariant}\n\t\t\t\t\t\tinitial=\"initial\"\n\t\t\t\t\t\tanimate=\"animate\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Headline variants={childVariant}>CodingArtist</Headline>\n\t\t\t\t\t\t<Headline variants={childVariant} className=\"subtitle\">\n\t\t\t\t\t\t\t3D Artist | Developer\n\t\t\t\t\t\t</Headline>\n\t\t\t\t\t</BannerTitle>\n\t\t\t\t</div>\n\t\t\t</BannerContainer> */}\n\n\t\t\t{/* <DownArrowContainer\n\t\t\t\tonClick={executeScroll}\n\t\t\t\tonMouseEnter={() => onCursor('hovered')}\n\t\t\t\tonMouseLeave={onCursor}\n\t\t\t>\n\t\t\t\t<DownArrow />\n\t\t\t</DownArrowContainer> */}\n\t\t</Banner>\n\t)\n}\n\nexport default HomeBanner\n","import React from 'react'\nimport { useStaticQuery, graphql, navigate } from 'gatsby'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\n\nimport {\n\tBanner,\n\tBannerImage,\n\tBannerContainer,\n\tBannerTitle,\n\tHeadline,\n\tDownArrowContainer,\n\tFeaturedProjects,\n\tLeftProjectWrap,\n\tLeftProjectHeadline,\n\tLeftLineContainer,\n\tLeftProjectImage,\n\tLeftProjectInfo,\n\tLeftProjectText,\n} from '@styles/homeStyles'\nimport { Container, Flex, PageContent } from '@styles/globalStyles'\n\nimport DownArrow from '@components/icons/down-arrow'\n\nimport SectionTitle from '@components/sectionTitle'\n\nconst parentVariant = {\n\tinitial: { y: 300 },\n\tanimate: {\n\t\ty: 0,\n\t\ttransition: {\n\t\t\tstaggerChildren: 0.2,\n\t\t},\n\t},\n}\n\nconst childVariant = {\n\tinitial: { y: 300 },\n\tanimate: {\n\t\ty: 0,\n\t\ttransition: {\n\t\t\tduration: 1,\n\t\t\tease: [0.6, 0.05, -0.01, 0.9],\n\t\t},\n\t},\n}\n\nconst HomeFeatured = ({ onCursor }) => {\n\tconst query = graphql`\n\t\tquery {\n\t\t\tallContentfulProject(\n\t\t\t\tlimit: 4\n\t\t\t\tsort: { fields: [date], order: DESC }\n\t\t\t\tfilter: { featured: { eq: true } }\n\t\t\t) {\n\t\t\t\tedges {\n\t\t\t\t\tnode {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tslug\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tsubtitle\n\t\t\t\t\t\tdate\n\t\t\t\t\t\tthumbnail {\n\t\t\t\t\t\t\tgatsbyImageData(\n\t\t\t\t\t\t\t\twidth: 1200\n\t\t\t\t\t\t\t\tlayout: CONSTRAINED\n\t\t\t\t\t\t\t\tplaceholder: TRACED_SVG\n\t\t\t\t\t\t\t\tformats: [AUTO, WEBP]\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tallContentfulArt(\n\t\t\t\tlimit: 4\n\t\t\t\tsort: { fields: [date], order: DESC }\n\t\t\t\tfilter: { featured: { eq: true } }\n\t\t\t) {\n\t\t\t\tedges {\n\t\t\t\t\tnode {\n\t\t\t\t\t\tid\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tsubtitle\n\t\t\t\t\t\tdate\n\t\t\t\t\t\tthumbnail {\n\t\t\t\t\t\t\tgatsbyImageData(\n\t\t\t\t\t\t\t\twidth: 1200\n\t\t\t\t\t\t\t\tlayout: CONSTRAINED\n\t\t\t\t\t\t\t\tplaceholder: TRACED_SVG\n\t\t\t\t\t\t\t\tformats: [AUTO, WEBP]\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`\n\n\tconst result = useStaticQuery(query)\n\t// const siteData = result.site.siteMetadata\n\t// const headerImage = getImage(result.banner)\n\t// console.log(siteData, headerImage)\n\t// return (<></>)\n\n\tconst featuredProj = result.allContentfulProject.edges\n\tconst featuredArt = result.allContentfulArt.edges\n\tlet featured = featuredProj\n\t\t.concat(featuredArt)\n\t\t.slice(0, 7)\n\t\t.map(el => el.node)\n\tfeatured.sort((a, b) => Date.parse(b.created_at) - Date.parse(a.created_at))\n\tconsole.log(featured)\n\n\t// const testImage = getImage(featured[0].thumbnail)\n\tconst dateOptions = { year: 'numeric', month: 'long', day: 'numeric' }\n\n\tconst clickOnProject = url => {\n\t\tconsole.log(`CLICK ${url}`)\n\t\tonCursor()\n\t\tnavigate(url)\n\t}\n\n\treturn (\n\t\t<PageContent id=\"first-content\">\n\t\t\t<SectionTitle title=\"Featured\" subtitle=\"My latest works\" />\n\n\t\t\t<FeaturedProjects>\n\t\t\t\t{featured.map((artwork, i) => {\n\t\t\t\t\tconst destUrl = artwork.slug != null ? '/' + artwork.slug : '/art'\n\t\t\t\t\tconst description =\n\t\t\t\t\t\tartwork.slug != null ? artwork.subtitle : '3D Render'\n\t\t\t\t\tconst dateString = new Date(artwork.date).toLocaleString(\n\t\t\t\t\t\t'en-US',\n\t\t\t\t\t\tdateOptions\n\t\t\t\t\t)\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<LeftProjectWrap key={artwork.id} invert={i % 2}>\n\t\t\t\t\t\t\t<LeftProjectImage\n\t\t\t\t\t\t\t\tinvert={i % 2}\n\t\t\t\t\t\t\t\tonClick={() => clickOnProject(destUrl)}\n\t\t\t\t\t\t\t\tonMouseEnter={() => onCursor('plus')}\n\t\t\t\t\t\t\t\tonMouseLeave={onCursor}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<GatsbyImage\n\t\t\t\t\t\t\t\t\t// image={testImage}\n\t\t\t\t\t\t\t\t\timage={artwork.thumbnail.gatsbyImageData}\n\t\t\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t\t\t\tlayout=\"constrained\"\n\t\t\t\t\t\t\t\t\tobjectFit=\"cover\"\n\t\t\t\t\t\t\t\t\tobjectPosition=\"50% 50%\"\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\twidth: '100%',\n\t\t\t\t\t\t\t\t\t\theight: '0',\n\t\t\t\t\t\t\t\t\t\tpaddingBottom: '56.25%',\n\t\t\t\t\t\t\t\t\t\t// width: '700px',\n\t\t\t\t\t\t\t\t\t\t// height: '700px',\n\t\t\t\t\t\t\t\t\t\t// maxWidth: '700px',\n\t\t\t\t\t\t\t\t\t\t// maxHeight: '700px',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tdraggable={false}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</LeftProjectImage>\n\t\t\t\t\t\t\t<LeftProjectInfo invert={i % 2}>\n\t\t\t\t\t\t\t\t<h3>{dateString}</h3>\n\t\t\t\t\t\t\t\t<h1>{artwork.title}</h1>\n\t\t\t\t\t\t\t\t<LeftLineContainer invert={i % 2}>\n\t\t\t\t\t\t\t\t\t<div></div>\n\t\t\t\t\t\t\t\t\t<h4>{'0' + (i + 1)}</h4>\n\t\t\t\t\t\t\t\t</LeftLineContainer>\n\t\t\t\t\t\t\t\t<h2>{description}</h2>\n\t\t\t\t\t\t\t</LeftProjectInfo>\n\t\t\t\t\t\t</LeftProjectWrap>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</FeaturedProjects>\n\t\t</PageContent>\n\t)\n}\n\nexport default HomeFeatured\n","import * as React from 'react'\n\n// Context\nimport {\n\tuseGlobalStateContext,\n\tuseGlobalDispatchContext,\n} from '@context/globalContext'\n\n// Components\nimport Seo from '@components/seo'\nimport HomeBanner from '@components/homePage/HomeBanner'\nimport HomeFeatured from '@components/homePage/HomeFeatured'\nimport Footer from '@components/footer'\n\nconst IndexPage = props => {\n\tconsole.log('PROPS', props)\n\n\tconst globalStateContext = useGlobalStateContext()\n\tconst dispatch = useGlobalDispatchContext()\n\n\tconst { cursorStyles } = globalStateContext\n\tconst onCursor = cursorType => {\n\t\tcursorType = (cursorStyles.includes(cursorType) && cursorType) || false\n\t\tdispatch({ type: 'CURSOR_TYPE', cursorType })\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Seo\n\t\t\t\ttitle=\"Developer - 3DArtist\"\n\t\t\t\tkeywords={[\n\t\t\t\t\t`artist`,\n\t\t\t\t\t`developer`,\n\t\t\t\t\t`engineer`,\n\t\t\t\t\t`3dartist`,\n\t\t\t\t\t`coding4rtist`,\n\t\t\t\t]}\n\t\t\t/>\n\t\t\t<HomeBanner onCursor={onCursor} />\n\t\t\t<HomeFeatured onCursor={onCursor} />\n\t\t\t<Footer onCursor={onCursor} />\n\t\t\t{/* <div></div>\n\t\t\t{[...Array(100)].map((e, i) => (\n\t\t\t\t<h1 key={i}>Test</h1>\n\t\t\t))} */}\n\t\t</div>\n\t)\n}\n\nexport default IndexPage\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","map","x","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","N","height","HTMLImageElement","prototype","W","e","t","a","Boolean","images","fallback","src","gatsbyImageData","gatsbyImage","childImageSharp","j","r","u","loading","shouldLoad","style","opacity","O","n","s","o","l","backgroundColor","width","position","top","left","bottom","right","objectFit","objectPosition","d","transition","z","D","_ref5","layout","paddingTop","maxWidth","display","alt","role","A","children","c","q","P","H","srcSet","decoding","G","sources","sizes","_ref6","media","type","key","V","propTypes","isRequired","displayName","B","F","Error","U","Y","_len","arguments","_key","h","apply","concat","X","image","J","Z","K","Set","Q","ee","te","as","className","class","g","onStartLoad","p","onLoad","onError","f","w","y","b","v","E","M","k","S","$","I","JSON","stringify","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","add","has","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","ie","re","_len2","_key2","ne","se","oe","__imageData","__error","console","warn","Banner","styled","div","withConfig","componentId","props","theme","background","BannerImage","BannerHeadline","motion","DownArrowContainer","h1","span","button","FeaturedProjects","ul","LeftProjectWrap","li","invert","LeftProjectInfo","css","LeftLineContainer","text","LeftProjectImage","DownArrow","React","xmlns","fill","parentVariant","animate","staggerChildren","childVariant","initial","duration","ease","_ref","onCursor","result","useStaticQuery","headerImage","site","siteMetadata","getImage","banner","GatsbyImage","draggable","variants","h2","onClick","executeScroll","scrollTo","onMouseEnter","onMouseLeave","featuredProj","allContentfulProject","edges","featuredArt","allContentfulArt","featured","el","node","sort","Date","parse","created_at","log","dateOptions","year","month","day","PageContent","id","SectionTitle","title","subtitle","artwork","destUrl","slug","description","dateString","date","toLocaleString","clickOnProject","url","navigate","thumbnail","paddingBottom","globalStateContext","useGlobalStateContext","dispatch","useGlobalDispatchContext","cursorStyles","cursorType","includes","Seo","keywords","HomeBanner","HomeFeatured","Footer"],"sourceRoot":""}